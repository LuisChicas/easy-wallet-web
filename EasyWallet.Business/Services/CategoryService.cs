using EasyWallet.Business.Abstractions;
using EasyWallet.Business.Mapper;
using EasyWallet.Business.Models;
using EasyWallet.Data.Abstractions;
using EasyWallet.Data.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EasyWallet.Business.Services
{
    public class CategoryService : ICategoryService
    {
        private readonly IUnitOfWork _unitOfWork;

        public CategoryService(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<IEnumerable<Category>> GetActiveCategoriesByUser(int userId)
        {
            var categoriesData = await _unitOfWork.Categories.GetActiveCategoriesWithTagsByUser(userId);

            foreach(var category in categoriesData)
            {
                category.Tags = category.Tags
                    .Where(t => t.DeletedAt == null && !t.IsAutoGenerated)
                    .ToList();
            }

            var categories = BusinessMapper.Mapper.Map<IEnumerable<Category>>(categoriesData);
            return categories;
        }

        public async Task<Category> CreateCategory(int userId, string name, IEnumerable<Tag> tags)
        {
            var categoryData = new CategoryData()
            {
                UserId = userId,
                Name = name,
                CategoryTypeId = 1,
                CreatedAt = DateTime.UtcNow
            };

            await _unitOfWork.Categories.AddAsync(categoryData);

            var userTags = await _unitOfWork.Tags.GetActiveTagsByUser(userId);

            TagData autogeneratedTag;
            var newCategoryTags = new List<TagData>();

            foreach(var tag in tags)
            {
                autogeneratedTag = userTags.FirstOrDefault(t => t.Name == tag.Name && t.IsAutoGenerated);
                if (autogeneratedTag != null)
                    autogeneratedTag.DeletedAt = DateTime.UtcNow;

                newCategoryTags.Add(new TagData()
                {
                    CategoryId = categoryData.Id,
                    Name = tag.Name,
                    CreatedAt = DateTime.UtcNow
                });
            }

            await _unitOfWork.Tags.AddRangeAsync(newCategoryTags);
            await _unitOfWork.CommitAsync();

            var category = BusinessMapper.Mapper.Map<Category>(categoryData);
            return category;
        }

        public async Task<Category> GetActiveCategoryById(int id)
        {
            var categoryData = await _unitOfWork.Categories.GetActiveCategoryWithTagsById(id);
            Category category = null;

            if (categoryData != null)
            {
                categoryData.Tags = categoryData.Tags
                    .Where(t => t.DeletedAt == null && !t.IsAutoGenerated)
                    .ToList();

                category = BusinessMapper.Mapper.Map<Category>(categoryData);
            }

            return category;
        }

        public async Task UpdateCategory(int categoryId, string name, IEnumerable<Tag> tags)
        {
            var categoryData = await _unitOfWork.Categories.GetActiveCategoryWithTagsById(categoryId);
            categoryData.Name = name;

            var userTags = await _unitOfWork.Tags.GetActiveTagsByUser(categoryData.UserId);

            var newTags = new List<TagData>();
            foreach(var formTag in tags)
            {
                bool duplicatesNonAutoGeneratedTag = userTags.Any(t => t.Name == formTag.Name && !t.IsAutoGenerated);

                if (!string.IsNullOrEmpty(formTag.Name) && !duplicatesNonAutoGeneratedTag)
                {
                    var autogeneratedTag = userTags.FirstOrDefault(t => t.Name == formTag.Name && t.IsAutoGenerated);
                    if (autogeneratedTag != null)
                        autogeneratedTag.DeletedAt = DateTime.UtcNow;

                    newTags.Add(new TagData()
                    {
                        CategoryId = categoryData.Id,
                        Name = formTag.Name,
                        CreatedAt = DateTime.UtcNow
                    });
                }
            }

            await _unitOfWork.Tags.AddRangeAsync(newTags);

            foreach(var categoryTag in categoryData.Tags)
            {
                if (!tags.Any(t => t.Name == categoryTag.Name))
                    categoryTag.DeletedAt = DateTime.UtcNow;
            }

            await _unitOfWork.CommitAsync();
        }

        public async Task DeleteCategory(int id)
        {
            var categoryData = await _unitOfWork.Categories.GetActiveCategoryWithTagsById(id);
            categoryData.DeletedAt = DateTime.UtcNow;

            foreach (var tag in categoryData.Tags)
                tag.DeletedAt = DateTime.UtcNow;

            await _unitOfWork.CommitAsync();
        }
    }
}
