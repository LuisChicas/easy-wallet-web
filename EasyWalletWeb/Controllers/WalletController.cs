using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using EasyWalletWeb.Infrastructure;
using EasyWalletWeb.Models;
using EasyWalletWeb.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Localization;

namespace EasyWalletWeb.Controllers
{
    //[Authorize]
    public class WalletController : Controller
    {
        private readonly DatabaseContext _context;
        private readonly IStringLocalizer<WalletController> _localizer;        
        
        public WalletController(DatabaseContext context, IStringLocalizer<WalletController> localizer)
        {
            _context = context;
            _localizer = localizer;
        }

        public IActionResult Index()
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToRoute("login");
            }

            return View();
        }

        [HttpPost]
        public IActionResult Entry(WalletEntry form)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToRoute("login");
            }

            EntryValidatorResult result = EntryValidator.Validate(form.Entry, _localizer);

            if (!result.IsValid)
            {
                ModelState.AddModelError("Entry", result.ErrorMessage);
                return View("Index", form);
            }

            int userId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
            Category[] categories = _context.Categories
                .Where(c => c.UserId == userId && c.DeletedAt == null)
                .Include(c => c.Tags)
                .ToArray();

            int tagId = default(int);

            foreach (Category c in categories)
            {
                foreach (var t in c.Tags)
                {
                    if (result.Keyword.ToLower() == t.Name.ToLower())
                    {
                        tagId = t.Id;
                        break;
                    }
                }
            }

            if (tagId == default(int))
            {
                var othersCategory = categories.First(c => c.Name == "Others" || c.Name == "Otros");
                var tag = new Tag();
                tag.Name = result.Keyword;
                tag.CategoryId = othersCategory.Id;
                tag.CreatedAt = DateTime.UtcNow;
                tag.IsAutoGenerated = true;
                _context.Tags.Add(tag);
                _context.SaveChanges();

                tagId = _context.Tags.First(t => t.CategoryId == othersCategory.Id && t.Name == result.Keyword).Id;
            }

            DateTime today = DateTime.Now;

            var date = new DateTime(
                form.Date.Year, 
                form.Date.Month, 
                form.Date.Day, 
                today.Hour, 
                today.Minute, 
                today.Second);

            var entry = new Entry
            {
                Amount = result.Amount,
                TagId = tagId,
                Date = date,
                CreatedAt = DateTime.UtcNow
            };

            _context.Entries.Add(entry);
            _context.SaveChanges();
            return View("Index", new WalletEntry { PreviousEntrySaved = true });
        }
    }
}